/*
Sub Store ËßÑÂàôÈÖçÁΩÆËÑöÊú¨
ÁâàÊú¨: 1.1.0
Êõ¥Êñ∞Êó∂Èó¥Ôºö2024-12-25
ËÑöÊú¨ÂäüËÉΩ: 
 - Sub Store Â§ÑÁêÜËÆ¢ÈòÖÊ∫êÔºå‰∏∫ Clash„ÄÅClash.Meta„ÄÅStash Ê†ºÂºèËÆ¢ÈòÖÊ∑ªÂä†ÂÆåÊï¥ÁöÑËßÑÂàôÈÖçÁΩÆ
 - Ëá™Âä®ÂàÜÁ±ªÂπ∂ÁªÑÁªá‰ª£ÁêÜËäÇÁÇπ
 - ÈÖçÁΩÆ‰ª£ÁêÜÂàÜÊµÅËßÑÂàô
 - ËÆæÁΩÆ DNS Ëß£ÊûêÁ≠ñÁï•

ËÆ¢ÈòÖÊ∫ê -> Âü∫Á°ÄËß£Êûê -> Ê†ºÂºèÁâπÂÆöËΩ¨Êç¢ -> ËæìÂá∫
                        ‚Üë
                     ËÑöÊú¨Âú®ËøôÈáåÊâßË°å

Sub-StoreÈ°πÁõÆÂú∞ÂùÄ: https://github.com/sub-store-org/Sub-Store
Áî®Ê≥ï: Ê∑ªÂä†Âà∞Sub StoreÁöÑËÑöÊú¨Êìç‰Ωú‰∏≠
ËØ¥Êòé: Ê∑ªÂä†ËßÑÂàôÈÖçÁΩÆ„ÄÅ‰ª£ÁêÜÁªÑÈÖçÁΩÆ„ÄÅDNSÈÖçÁΩÆÁ≠â

ÂèÇÊï∞ËØ¥Êòé:
- proxyName: ÈªòËÆ§‰ª£ÁêÜÁªÑÂêçÁß∞
- customRules: Ëá™ÂÆö‰πâËßÑÂàôÂàóË°®
*/

// ÂÖ®Â±ÄÂèòÈáè
const scriptName = "Sub-Store Rules";
const version = "1.1.0";
const proxyName = "‰ª£ÁêÜÊ®°Âºè";

// Ëé∑ÂèñËÑöÊú¨ÂèÇÊï∞
const inArg = $arguments || {};

// Ê≠£ÂàôË°®ËææÂºèÂÆö‰πâ
const regexConfig = {
    // ÈúÄË¶ÅÂà†Èô§ÁöÑËäÇÁÇπÂÖ≥ÈîÆËØç
    removeNodes: /Â•óÈ§ê|Âà∞Êúü|ÊúâÊïà|Ââ©‰Ωô|ÁâàÊú¨|Â∑≤Áî®|ËøáÊúü|Â§±ËÅî|ÊµãËØï|ÂÆòÊñπ|ÁΩëÂùÄ|Â§áÁî®|Áæ§|TEST|ÂÆ¢Êúç|ÁΩëÁ´ô|Ëé∑Âèñ|ËÆ¢ÈòÖ|ÊµÅÈáè|Êú∫Âú∫|‰∏ãÊ¨°|ÂÆòÂùÄ|ËÅîÁ≥ª|ÈÇÆÁÆ±|Â∑•Âçï|Â≠¶ÊúØ|USE[D]?|TOTAL|EXPIRE|EMAIL/i,
    
    // ÂÄçÁéáÂåπÈÖç
    multiplier: /(?:\d+(?:\.\d+)?)[xX√ó]|[xX√ó](?:\d+(?:\.\d+)?)/,
    
    // Âú∞Âå∫ÂåπÈÖç
    regions: {
        HK: /^(?:È¶ôÊ∏Ø|HK|Hong Kong|üá≠üá∞)/i,
        SG: /^(?:Êñ∞Âä†Âù°|ÁãÆÂüé|SG|Singapore|üá∏üá¨)/i,
        JP: /^(?:Êó•Êú¨|JP|Japan|üáØüáµ)/i,
        US: /^(?:ÁæéÂõΩ|US|United States|üá∫üá∏)/i,
        TW: /^(?:Âè∞Êπæ|TW|Taiwan|üáπüáº)/i,
        KR: /^(?:Èü©ÂõΩ|KR|Korea|üá∞üá∑)/i
    },
    
    // ÁâπÊÆäÊ†áËØÜ
    specialTags: /IPLC|IEPL|BGP|RELAY|PREMIUM|PLUS|PRO|GAME/i,
    
    // Êï∞Â≠óÂ∫èÂè∑
    number: /\s*(?:[0-9]{1,2}|[0-9]{1,2}\.[0-9]{1,2})\s*$/,

    // Âú∞Âå∫ÊõøÊç¢ËßÑÂàô
    regionReplace: {
        GB: /UK/g,
        "B-G-P": /BGP/g,
        "Russia Moscow": /Moscow/g,
        "Korea Chuncheon": /Chuncheon|Seoul/g,
        "Hong Kong": /Hongkong|HONG KONG/gi,
        "United Kingdom London": /London|Great Britain/g,
        "Dubai United Arab Emirates": /United Arab Emirates/g,
        "Taiwan TW Âè∞Êπæ üáπüáº": /(Âè∞|Tai\s?wan|TW).*?üá®üá≥|üá®üá≥.*?(Âè∞|Tai\s?wan|TW)/g,
        "United States": /USA|Los Angeles|San Jose|Silicon Valley|Michigan/g,
        Êæ≥Â§ßÂà©‰∫ö: /Êæ≥Ê¥≤|Â¢®Â∞îÊú¨|ÊÇâÂ∞º|ÂúüÊæ≥|(Ê∑±|Ê≤™|Âëº|‰∫¨|Âπø|Êù≠)Êæ≥/g,
        Âæ∑ÂõΩ: /(Ê∑±|Ê≤™|Âëº|‰∫¨|Âπø|Êù≠)Âæ∑(?!.*(I|Á∫ø))|Ê≥ïÂÖ∞ÂÖãÁ¶è|Êª¨Âæ∑/g,
        È¶ôÊ∏Ø: /(Ê∑±|Ê≤™|Âëº|‰∫¨|Âπø|Êù≠)Ê∏Ø(?!.*(I|Á∫ø))/g,
        Êó•Êú¨: /(Ê∑±|Ê≤™|Âëº|‰∫¨|Âπø|Êù≠|‰∏≠|ËæΩ)Êó•(?!.*(I|Á∫ø))|‰∏ú‰∫¨|Â§ßÂùÇ/g,
        Êñ∞Âä†Âù°: /ÁãÆÂüé|(Ê∑±|Ê≤™|Âëº|‰∫¨|Âπø|Êù≠)Êñ∞/g,
        ÁæéÂõΩ: /(Ê∑±|Ê≤™|Âëº|‰∫¨|Âπø|Êù≠)Áæé|Ê≥¢ÁâπÂÖ∞|ËäùÂä†Âì•|Âì•‰º¶Â∏É|Á∫ΩÁ∫¶|Á°ÖË∞∑|‰øÑÂãíÂÜà|Ë•øÈõÖÂõæ|ËäùÂä†Âì•/g
    }
};

// ‰∏ªÂáΩÊï∞
function main(params) {
    try {
        console.log(`${scriptName} v${version} ÂºÄÂßãÂ§ÑÁêÜ...`);
        
        // ÂèÇÊï∞Ê£ÄÊü•
        if (!params || !params.proxies || params.proxies.length === 0) {
            throw new Error('ËäÇÁÇπÂàóË°®‰∏∫Á©∫');
        }

        // Ê∏ÖÁêÜÊó†ÊïàËäÇÁÇπ
        params.proxies = cleanNodes(params.proxies);
        
        // Ê∑ªÂä†ËßÑÂàôÈÖçÁΩÆ
        addRules(params);
        // Ê∑ªÂä†‰ª£ÁêÜÁªÑÈÖçÁΩÆ
        addProxyGroups(params);
        // Ê∑ªÂä†DNSÈÖçÁΩÆ
        addDns(params);

        console.log('Â§ÑÁêÜÂÆåÊàê');
        return params;
    } catch (err) {
        console.log(`Â§ÑÁêÜÂ§±Ë¥•: ${err.message}`);
        $notification.post(scriptName, 'Â§ÑÁêÜÂ§±Ë¥•', err.message);
        return params;
    }
}

// Ê∏ÖÁêÜËäÇÁÇπ
function cleanNodes(proxies) {
    return proxies.filter(proxy => {
        try {
            // ËøáÊª§Êó†ÊïàËäÇÁÇπ
            if (regexConfig.removeNodes.test(proxy.name)) {
                console.log(`Âà†Èô§Êó†ÊïàËäÇÁÇπ: ${proxy.name}`);
                return false;
            }
            
            // Â§ÑÁêÜËäÇÁÇπÂêçÁß∞
            const processedName = processNodeName(proxy.name);
            if (processedName) {
                proxy.name = processedName.name;
                return true;
            }
            return false;
        } catch (err) {
            console.log(`ËäÇÁÇπÂ§ÑÁêÜÂ§±Ë¥•: ${proxy.name}, ${err.message}`);
            return false;
        }
    });
}
// Â§ÑÁêÜËäÇÁÇπÂêçÁß∞
function processNodeName(name) {
    try {
        let processedName = name;
        
        // Â∫îÁî®Âú∞Âå∫ÊõøÊç¢ËßÑÂàô
        Object.entries(regexConfig.regionReplace).forEach(([replace, regex]) => {
            processedName = processedName.replace(regex, replace);
        });
        
        // ÁßªÈô§Êï∞Â≠óÂ∫èÂè∑
        processedName = processedName.replace(regexConfig.number, '');
        
        // ÊèêÂèñÂú∞Âå∫Ê†áËØÜ
        const region = Object.entries(regexConfig.regions)
            .find(([_, regex]) => regex.test(processedName))?.[0];
            
        // ÊèêÂèñÂÄçÁéá
        const multiplier = processedName.match(regexConfig.multiplier)?.[0];
        
        // ÊèêÂèñÁâπÊÆäÊ†áËØÜ
        const specialTag = processedName.match(regexConfig.specialTags)?.[0];
        
        // ÁªÑÂêàÊñ∞ÂêçÁß∞
        let newName = [];
        if (region) newName.push(region);
        if (specialTag) newName.push(specialTag);
        if (multiplier) newName.push(multiplier);
        
        return {
            name: newName.join(' ') || processedName,
            region,
            multiplier,
            specialTag
        };
    } catch (err) {
        console.log(`ËäÇÁÇπÂêçÁß∞Â§ÑÁêÜÂ§±Ë¥•: ${name}, ${err.message}`);
        return null;
    }
}

// Ê∑ªÂä†ËßÑÂàôÈÖçÁΩÆ
function addRules(params) {
    const customRules = [
        // Âú®Ê≠§Ê∑ªÂä†Ëá™ÂÆö‰πâËßÑÂàô, ÊúÄÈ´ò‰ºòÂÖàÁ∫ß
        // Á§∫‰æã:
        //"DOMAIN-SUFFIX,example.com," + proxyName,
    ];

    const rules = [
        ...customRules,
        "RULE-SET,reject,ÂπøÂëäÊã¶Êà™",
        "RULE-SET,direct,DIRECT",
        "RULE-SET,cncidr,DIRECT",
        "RULE-SET,private,DIRECT",
        "RULE-SET,lancidr,DIRECT",
        "GEOIP,LAN,DIRECT,no-resolve",
        "GEOIP,CN,DIRECT,no-resolve",
        "RULE-SET,applications,DIRECT",
        "RULE-SET,openai,ChatGPT",
        "RULE-SET,claude,Claude",
        "RULE-SET,spotify,Spotify",
        "RULE-SET,telegramcidr,ÁîµÊä•Ê∂àÊÅØ,no-resolve",
        "RULE-SET,tld-not-cn," + proxyName,
        "RULE-SET,google," + proxyName,
        "RULE-SET,icloud," + proxyName,
        "RULE-SET,apple," + proxyName,
        "RULE-SET,gfw," + proxyName,
        "RULE-SET,greatfire," + proxyName,
        "RULE-SET,proxy," + proxyName,
        "MATCH,ÊºèÁΩë‰πãÈ±º"
    ];

    const ruleProviders = {
        reject: {
            type: "http",
            behavior: "domain",
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/reject.txt",
            path: "/.config/clash/ruleset/custom/reject.yaml",
            interval: 86400
        },
        direct: {
            type: "http",
            behavior: "domain",
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/direct.txt",
            path: "/.config/clash/ruleset/custom/direct.yaml",
            interval: 86400
        },
        proxy: {
            type: "http",
            behavior: "domain",
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/proxy.txt",
            path: "/.config/clash/ruleset/custom/proxy.yaml",
            interval: 86400
        },
        icloud: {
            type: "http",
            behavior: "domain",
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/icloud.txt",
            path: "./ruleset/icloud.yaml",
            interval: 86400,
        },
        apple: {
            type: "http",
            behavior: "domain",
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/apple.txt",
            path: "./ruleset/apple.yaml",
            interval: 86400,
        },
        google: {
            type: "http",
            behavior: "domain",
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/google.txt",
            path: "./ruleset/google.yaml",
            interval: 86400,
        },
        private: {
            type: "http",
            behavior: "domain",
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/private.txt",
            path: "/.config/clash/ruleset/custom/private.yaml",
            interval: 86400
        },
        gfw: {
            type: "http",
            behavior: "domain",
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/gfw.txt",
            path: "/.config/clash/ruleset/custom/gfw.yaml",
            interval: 86400
        },
        greatfire: {
            type: "http",
            behavior: "domain",
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/greatfire.txt",
            path: "/.config/clash/ruleset/custom/greatfire.yaml",
            interval: 86400
        },
        "tld-not-cn": {
            type: "http",
            behavior: "domain",
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/tld-not-cn.txt",
            path: "/.config/clash/ruleset/custom/tld-not-cn.yaml",
            interval: 86400
        },
        telegramcidr: {
            type: "http",
            behavior: "ipcidr",
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/telegramcidr.txt",
            path: "/.config/clash/ruleset/custom/telegramcidr.yaml",
            interval: 86400
        },
        cncidr: {
            type: "http",
            behavior: "ipcidr",
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/cncidr.txt",
            path: "/.config/clash/ruleset/custom/cncidr.yaml",
            interval: 86400
        },
        lancidr: {
            type: "http",
            behavior: "ipcidr",
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/lancidr.txt",
            path: "/.config/clash/ruleset/custom/lancidr.yaml",
            interval: 86400
        },
        applications: {
            type: "http",
            behavior: "classical",
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/applications.txt",
            path: "/.config/clash/ruleset/custom/applications.yaml",
            interval: 86400
        },
        openai: {
            type: "http",
            behavior: "classical",
            url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/OpenAI/OpenAI.yaml",
            path: "/.config/clash/ruleset/custom/openai.yaml",
            interval: 86400
        },
        claude: {
            type: "http",
            behavior: "classical",
            url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Claude/Claude.yaml",
            path: "/.config/clash/ruleset/custom/claude.yaml",
            interval: 86400
        },
        spotify: {
            type: "http",
            behavior: "classical",
            url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Spotify/Spotify.yaml",
            path: "/.config/clash/ruleset/custom/spotify.yaml",
            interval: 86400
        }
    };

    params["rule-providers"] = ruleProviders;
    params.rules = rules;
}

// Ê∑ªÂä†‰ª£ÁêÜÁªÑÈÖçÁΩÆ
function addProxyGroups(params) {
    try {
        // ÊâÄÊúâ‰ª£ÁêÜ
        const allProxies = params.proxies.map(p => p.name);
        
        // Ëá™Âä®ÈÄâÊã©‰ª£ÁêÜÁªÑ
        const autoProxyGroups = Object.entries(regexConfig.regions).map(([region, regex]) => ({
            name: `${region}-Ëá™Âä®ÈÄâÊã©`,
            type: "url-test",
            url: "http://www.gstatic.com/generate_204",
            interval: 300,
            tolerance: 50,
            "max-failed-times": 3,
            lazy: true,
            proxies: allProxies.filter(name => regex.test(name)),
            hidden: true
        })).filter(group => group.proxies.length > 0);

        // ÊâãÂä®ÈÄâÊã©‰ª£ÁêÜÁªÑ
        const manualProxyGroups = Object.entries(regexConfig.regions).map(([region, regex]) => ({
            name: `${region}-ÊâãÂä®ÈÄâÊã©`,
            type: "select",
            proxies: ["DIRECT", ...allProxies.filter(name => regex.test(name))],
            hidden: false
        })).filter(group => group.proxies.length > 1);

        // ÁîüÊàê‰ª£ÁêÜÁªÑÈÖçÁΩÆ
        const groups = [
            {
                name: proxyName,
                type: "select",
                proxies: ["Ëá™Âä®ÈÄâÊã©", "ÊâãÂä®ÈÄâÊã©", "Ë¥üËΩΩÂùáË°°(Êï£Âàó)", "Ë¥üËΩΩÂùáË°°(ËΩÆËØ¢)", "DIRECT"],
                icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/proxy.svg"
            },
            {
                name: "ÊâãÂä®ÈÄâÊã©",
                type: "select",
                proxies: allProxies,
                icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/select.svg"
            },
            {
                name: "Ëá™Âä®ÈÄâÊã©",
                type: "url-test",
                url: "http://www.gstatic.com/generate_204",
                interval: 300,
                tolerance: 50,
                "max-failed-times": 3,
                lazy: true,
                proxies: allProxies,
                icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/auto.svg"
            },
            {
                name: "Ë¥üËΩΩÂùáË°°(Êï£Âàó)",
                type: "load-balance",
                strategy: "consistent-hashing",
                url: "http://www.gstatic.com/generate_204",
                interval: 300,
                "max-failed-times": 3,
                lazy: true,
                proxies: allProxies,
                icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/round-robin.svg"
            },
            {
                name: "Ë¥üËΩΩÂùáË°°(ËΩÆËØ¢)",
                type: "load-balance",
                strategy: "round-robin",
                url: "http://www.gstatic.com/generate_204",
                interval: 300,
                "max-failed-times": 3,
                lazy: true,
                proxies: allProxies,
                icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/round-robin.svg"
            },
            {
                name: "ChatGPT",
                type: "select",
                proxies: ["ÁæéÂõΩËäÇÁÇπ", "Êó•Êú¨ËäÇÁÇπ", "ÊâãÂä®ÈÄâÊã©"],
                icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/chatgpt.svg"
            },
            {
                name: "Claude",
                type: "select",
                proxies: ["ÁæéÂõΩËäÇÁÇπ", "ÊâãÂä®ÈÄâÊã©"],
                icon: "https://raw.githubusercontent.com/clash-verge-rev/clash-verge-rev.github.io/main/docs/assets/icons/claude.svg"
            },
            {
                name: "Spotify",
                type: "select",
                proxies: ["DIRECT", proxyName],
                icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/spotify.svg"
            },
            {
                name: "ÁîµÊä•Ê∂àÊÅØ",
                type: "select",
                proxies: [proxyName, "ÊâãÂä®ÈÄâÊã©"],
                icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/telegram.svg"
            },
            {
                name: "ÂπøÂëäÊã¶Êà™",
                type: "select",
                proxies: ["REJECT", "DIRECT"],
                icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/reject.svg"
            },
            ...autoProxyGroups,
            ...manualProxyGroups
        ];

        params["proxy-groups"] = groups;
    } catch (err) {
        console.log(`‰ª£ÁêÜÁªÑÈÖçÁΩÆÂ§±Ë¥•: ${err.message}`);
        throw err;
    }
}

// Ê∑ªÂä†DNSÈÖçÁΩÆÔºåÈò≤Ê≠¢dnsÊ≥ÑÈú≤
function addDns(params) {
    try {
        const cnDnsList = [
            "https://223.5.5.5/dns-query",
            "https://1.12.12.12/dns-query",
        ];
        const trustDnsList = [
            'quic://dns.cooluc.com',
            "https://1.0.0.1/dns-query",
            "https://1.1.1.1/dns-query",
        ];

        const dnsOptions = {
            enable: true,
            "prefer-h3": true,
            "default-nameserver": cnDnsList,
            nameserver: trustDnsList,
            "nameserver-policy": {
                "geosite:cn": cnDnsList,
                "geosite:geolocation-!cn": trustDnsList,
            },
            fallback: trustDnsList,
            "fallback-filter": {
                geoip: true,
                "geoip-code": "CN",
                geosite: ["gfw"],
                ipcidr: ["240.0.0.0/4"],
                domain: ["+.google.com", "+.facebook.com", "+.youtube.com"],
            },
        };

        const githubPrefix = "https://fastgh.lainbo.com/";
        const rawGeoxURLs = {
            geoip: "https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip-lite.dat",
            geosite: "https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geosite.dat",
            mmdb: "https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/country-lite.mmdb",
        };

        const accelURLs = Object.fromEntries(
            Object.entries(rawGeoxURLs).map(([key, url]) => [
                key,
                `${githubPrefix}${url}`,
            ])
        );

        const otherOptions = {
            "unified-delay": true,
            "tcp-concurrent": true,
            profile: {
                "store-selected": true,
                "store-fake-ip": true,
            },
            sniffer: {
                enable: true,
                sniff: {
                    TLS: {
                        ports: [443, 8443],
                    },
                    HTTP: {
                        ports: [80, "8080-8880"],
                        "override-destination": true,
                    },
                },
            },
            "geodata-mode": true,
            "geox-url": accelURLs,
        };

        params.dns = { ...params.dns, ...dnsOptions };
        Object.assign(params, otherOptions);
    } catch (err) {
        console.log(`DNSÈÖçÁΩÆÂ§±Ë¥•: ${err.message}`);
        throw err;
    }
}

// ËæÖÂä©ÂáΩÊï∞
function getProxiesByRegex(params, regex) {
    try {
        const matchedProxies = params.proxies
            .filter(p => regex.test(p.name))
            .map(p => p.name);
        return matchedProxies.length > 0 ? matchedProxies : ["ÊâãÂä®ÈÄâÊã©"];
    } catch (err) {
        console.log(`Ê≠£ÂàôÂåπÈÖçÂ§±Ë¥•: ${err.message}`);
        return ["ÊâãÂä®ÈÄâÊã©"];
    }
}

function getManualProxiesByRegex(params, regex) {
    try {
        const matchedProxies = params.proxies
            .filter(p => regex.test(p.name))
            .map(p => p.name);
        return matchedProxies.length > 0 ? matchedProxies : ["DIRECT", "ÊâãÂä®ÈÄâÊã©", proxyName];
    } catch (err) {
        console.log(`Ê≠£ÂàôÂåπÈÖçÂ§±Ë¥•: ${err.message}`);
        return ["DIRECT", "ÊâãÂä®ÈÄâÊã©", proxyName];
    }
}

// ÂØºÂá∫
module.exports = { main };